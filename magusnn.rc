##
## magusnn.rc
################################################################################################
## How to lookup a players RC file?
## e.g. http://crawl.akrasiac.org/rcfiles/crawl-0.25/magusnn.rc
## How to learn RC file options?
## http://crawl.akrasiac.org/docs/options_guide.txt
## RC resources & references
## http://crawl.berotato.org/crawl/rcfiles/crawl-0.23/Freakazoid.rc
## https://github.com/gammafunk/dcss-rc#1-include-the-rc-or-lua-file-in-your-rc
## https://github.com/HilariousDeathArtist/DCSSConfigFile/blob/master/HilariousDeathArtist.txt
################################################################################################

##
## Utils
################################################################################################
{
function rc_out(symbol, color, msg)
  crawl.mpr(string.format("\n>> %s <%s>%s</%s>", symbol, color, msg, color))
end
function rc_msg(msg)
  rc_out("🤖", "blue", msg)
end
function rc_scs(msg)
  rc_out("✅", "green", msg)
end
function rc_err(msg)
  rc_out("❌", "lightred", msg)
end

function colortest()
  local colors = {"darkgrey","lightgrey","white","blue","lightblue","green","lightgreen","cyan","lightcyan","red","lightred","magenta","lightmagenta","yellow","brown"}
  for i, color in ipairs(colors) do
    crawl.mpr(string.format("\n>> 🤖 colortest <%s>%s</%s>", color, color, color))
  end
end
}

##
## BEGIN
################################################################################################
: rc_msg("Initializing magusnn.rc...")

##
## Setup
################################################################################################
{
-- Open skills menu at start of runs
local need_skills_opened = true
local function start_open_skills()
  if you.turns() == 0 and need_skills_opened then
    need_skills_opened = false
    crawl.sendkeys("m")
  end
end

-- Compare item for same name but higher plus
local function should_pickup_equip(cur, i2)
  -- always pickup god gift equipment
  if i2.god_gift then return true end

  --  no item in the slot? autopickup anything!
  if cur == nil then return true end

  -- items names are the same, pickup higher plus
  if cur.name("qual") == i2.name("qual") then
    if i2.plus ~= nil and cur.plus < i2.plus then
      return true
    end
  end

  if cur.branded or cur.artefact then return end
  if i2.branded then return true end

  return false
end

-- Equipment autopickup (by Medar and various others)
-- Source http://crawl.berotato.org/crawl/rcfiles/crawl-0.23/Freakazoid.rc
local function pickup_equipment(it, name)
  -- DEBUG
  -- rc_msg(string.format("pickup_equipment: %s", name))
  
  if it.is_useless then return end

  -- always pickup artefacts
  if it.artefact then return true end

  local class = it.class(true)

  if class == "weapon" then
    -- get currently equipped item in slot
    local cur = items.equipped_at("weapon")

    -- when using unarmed combat, we want to skip the should_pickup_equip for weapons
    if cur == nil then
      -- always pickup god gift equipment
      if it.god_gift then return true end

      return false
    end

    if should_pickup_equip(cur, it) then return true end

  elseif class == "armour" then
    local good_slots = {cloak="Cloak", helmet="Helmet",
                        gloves="Gloves", boots="Boots"}
    st, _ = it.subtype()

    -- Autopickup found aux armour if 1) we don't have any or 2) it's artefact,
    -- or 3) if we don't have artefact or ego armour, and the found armour is
    -- ego.
    if good_slots[st] ~= nil then
      if good_slots[st] == "Gloves" and you.has_claws() > 0 then return end

      -- get currently equipped item in slot
      local cur = items.equipped_at(good_slots[st])

      if should_pickup_equip(cur, it) then return true end
      
    -- Autopickup found body armour of the same kind we're wearing, according
    -- to conditions (2) and (3) above used for aux slots.
    elseif st == "body" then
      -- get currently equipped item in slot
      local cur = items.equipped_at("armour")
      
      if should_pickup_equip(cur, it) then return true end
    end
  end

  return
end

-- Run once on setup
add_autopickup_func(pickup_equipment)
start_open_skills()

-- Run every player turn
function ready()
  -- rc_msg("Running ready function...")
end

}

: rc_msg("Defining global options...")

##
## General
#######################################
default_manual_training = true
stop = Your transformation is almost over.
show_more = false
autofight_stop = 75
autofight_caught = true

##
## Travel
#######################################
travel_avoid_terrain = deep water
# Set to -1 for instant-travel, set to 1 to see travel paths
travel_delay = -1
explore_delay = 1
# Stop when autopickup items come into view
explore_stop += greedy_items

##
## autoinscribe + autopickup
#######################################
show_god_gift = unident

ai := autoinscribe

ai += (bad|dangerous)_item.*potion:!q
ai += (bad|dangerous)_item.*scroll:!r
ai += potions? of berserk rage:!q
ai += scrolls? of silence:!r

ai += of faith:!P
ai += manual of:!d

# Prevent melee with all staves;
# If we want to melee with one, it's safe to require removing the annotation.
ai += magical staff:!a

# Prevent auto quivering and cycling ammo
ai += (large rock|throwing net|curare|of dispersal):=f

# Convenient shortcuts
ai += curing:@q1
ai += potions? of heal wounds:@q2
ai += potions? of haste:@q3
ai += scrolls? of teleportation:@r4
ai += identify:@r1
ai += remove curse:@r2
ai += chunks of flesh:@e1
ai += ration:@e2

# Automated inscription for sorting armor & weapons
# e.g. `mace` to find any mace
ai += (dagger|quick blade|short sword|rapier):short
ai += (falchion|long sword|scimitar|demon blade|eudemon blade|double sword|great sword|triple sword):long
ai += (hand axe|war axe|broad axe|battleaxe|executioner's axe):axe
ai += (whip|club|mace|flail|morningstar|demon whip|sacred scourge|dire flail|eveningstar|great mace|giant club|giant spiked club):mace
ai += (spear|trident|halberd|scythe|demon trident|trishula|glaive|bardiche):polearm
ai += (staff|quarterstaff|lajatang):staff
ai += (dart|throwing net|stone|boomerang|javelin|large rock):throwing
ai += (hunting sling|fustibalus):sling
ai += (shortbow|longbow):bow
ai += (hand crossbow|arbalest|triple crossbow):crossbow


# Rare items
ai += (executioner's axe|double sword|triple sword|eveningstar|quick blade):rare
ai += (storm dragon hide|storm dragon armour|pearl dragon|gold dragon|crystal plate):rare


# Always automatically pickup
ai += curare:=g
ai += dragon scale:=g

: if you.race() == "Mummy" then
autopickup = /?"+|0}$
: else
autopickup = /%?"!+|0}$
: end
# )       Weapons
# (       Missiles
# [       Armour
# /       Wands
# %       Food
# ?       Scrolls
# " or =  Jewellery
# !       Potions
# + or :  Books
# |       Staves
# 0       Orbs
# }       Misc. items
# $       Gold
# Note that _whether_ items are picked up automatically or not, is
# controlled by the in-game toggle Ctrl-A. Also note that picking
# up takes a turn, but only one turn (regardless of the number of
# items). If you teleport or blink onto a square with interesting
# items, these will not be picked up.

ae := autopickup_exceptions

# Reset all autopickup exceptions
ae = 

ae += <javelin
ae += <throwing net
: if you.race() == "Troll" then
ae += <large rock
: end


ae += <scrolls? of (vulnerability|immolation)
ae += >scrolls? of (noise)

ae += <potions? of (mutation|lignification)
ae += >potions? of (degeneration)

ae += <(tins of tremorstones)

# Pickup runes but not 'runed' anything
ae += <rune(s)?[^d]

##
## Display
#######################################
view_delay = 300
hp_colour = 100:lightgreen, 99:lightgray, 75:yellow, 50:lightred, 25:red
mp_colour = 100:cyan, 99:lightgray, 75:yellow, 50:lightred, 25:red
hp_warning = 50

monster_list_colour =
monster_list_colour += friendly:green,neutral:brown
monster_list_colour += good_neutral:brown,strict_neutral:brown
monster_list_colour += trivial:darkgrey,easy:lightgrey
monster_list_colour += tough:yellow,nasty:lightred

##
## Interface
#######################################
# Unequip already equipped items by selecting in equip menus (i.e. w, W, P)
equip_unequip = true
# Cannot target self with risky magic
allow_self_target = no
# mini map size, [X] pixels per tile
tile_map_pixels = 8

##
## Menu & Item Colors
#######################################
## Menu & Item colors should match exactly when possible.
## For menu_colour, the first match ignores subsequent matches.
## For item_glyph, subsequent matches override previous ones.
## Many of the entries below come from dat/defaults/menu_colours.txt,
## which we have to duplicate here since we want only some of the
## entries from that file.

# Enable use of darkgrey
bold_brightens_foreground=true

item := item_glyph
menu := menu_colour
menu =

menu += notes:white:Reached XP level

### General Inventory###

## Reasonable defaults
item += potion:lightgrey
item += scroll:lightgrey
item += wand:lightgrey
item += dangerous_item:blue
item += useless_item:darkgrey

# Items currently not affecting you.
menu += darkgrey:(melded)
# Items disliked by your god.
menu += red:forbidden
# Useless items, comes here to override artefacts etc.
menu += darkgrey:.*useless.*
# Handle cursed and equipped items early to override other colour settings.
menu += lightred:.*equipped.* cursed
menu += red: (a|the) cursed
menu += inventory:lightgreen:.*equipped.*
# Colouring of autoinscribed god gifts
menu += pickup:cyan:god gift
# Highlight (partly) selected items
menu += inventory:white:\w \+\s
menu += inventory:white:\w \#\s

### Food ###
## Color chunks, put ordinary ones on lightgrey.

menu += red:evil_eating.*chunk
item += evil_eating.*chunk:red
menu += blue:mutagenic.*chunk
item += mutagenic.*chunk:blue
menu += lightgrey:chunks?.*flesh
item += chunks?.*flesh:lightgrey
menu += green:( ration)
item += ( ration):green

### Potions ###

menu += lightgrey:potions? of.*(flight|stabbing)
item += potions? of.*(flight|stabbing):lightgrey
menu += brown:potions? of.*berserk
item += potions? of.*berserk:brown
menu += yellow:potions? of.*might
item += potions? of.*might:yellow
menu += cyan:potions? of.*cancellation
item += potions? of.*cancellation:cyan
menu += blue:potions? of.*(lignification|ambrosia)
item += potions? of.*(lignification|ambrosia):blue
menu += white:potions? of.*(heal wounds|curing)
item += potions? of.*(heal wounds|curing):white
menu += green:potions? of.*resistance
item += potions? of.*resistance:green
menu += lightgreen:potions? of.*(haste|invisibility)
item += potions? of.*(haste|invisibility):lightgreen
menu += lightcyan:potions? of.*mutation
item += potions? of.*mutation:lightcyan
menu += magenta:potions? of.*brilliance
item += potions? of.*brilliance:magenta
menu += lightmagenta:potions? of.*magic
item += potions? of.*magic:lightmagenta

### Scrolls ###

: if you.race() == "Vampire" or you.race() == "Mummy" or you.race() == "Ghoul" then
  menu += darkgrey:scroll.*holy word
  item += scroll.*holy word:darkgrey
  menu += brown:scroll.*torment
  item += scroll.*torment:brown
: else
  menu += brown:scroll.*holy word
  item += scroll.*holy word:brown
  menu += darkgrey:scroll.*torment
  item += scroll.*torment:darkgrey
: end
menu += white:scroll.*acquirement
item += scroll.*acquirement:white
menu += yellow:scroll.*(summoning)
item += scroll.*(summoning):yellow
menu += cyan:scroll.*identify
item += scroll.*identify:cyan
menu += lightcyan:scroll.*magic mapping
item += scroll.*magic mapping:lightcyan
menu += blue:scroll.*(noise|silence|vulnerability|immolation)
item += scroll.*(noise|silence|vulnerability|immolation):blue
menu += lightgrey:scroll.*remove curse
item += scroll.*remove curse:lightgrey
menu += green:scroll.*(fog|teleport)
item += scroll.*(fog|teleport):green
menu += lightgreen:scroll.*(fear|blink)
item += scroll.*(fear|blink):lightgreen
menu += lightmagenta:scroll.*(enchant|brand weapon)
item += scroll.*(enchant|brand weapon):lightmagenta

### Wands ###

# Sometimes can be dangerous or harmful
menu += blue:wand of.*random effects
item += wand of.*random effects:blue

# Single target piercing
menu += brown:wand of.*lightning
item += wand of.*lightning:brown
menu += yellow:wand of.*acid
item += wand of.*acid:yellow

menu += lightgrey:wand of.*flame
item += wand of.*flame:lightgrey
menu += white:wand of.*clouds
item += wand of.*clouds:white

menu += green:wand of.*digging
item += wand of.*digging:green

# Single-turn AOE
menu += cyan:wand of.*iceblast
item += wand of.*iceblast:cyan
menu += lightcyan:wand of.*scattershot
item += wand of.*scattershot:lightcyan

# MR-checking
menu += magenta:wand of.*(disintegration|confusion|polymorph)
item += wand of.*(disintegration|confusion|polymorph):magenta
menu += lightmagenta:wand of.*(paralysis|enslavement)
item += wand of.*(paralysis|enslavement):lightmagenta

### General identification ###

menu += cyan:manual of
item += manual of:cyan
menu += lightcyan:manual
item += manual:lightcyan
menu += lightblue:unidentified .*(potion|scroll|wand|jewellery|book|rod|magical staff)
item += unidentified.*(potion|scroll|wand|jewellery|book|rod|magical staff).*:lightblue

### Gear ###

menu += magenta:.*known .*(ring of (dexterity|strength|intelligence|slaying|evasion|protection(?! from))|amulet of reflection)
item += known.*(ring of (dexterity|strength|intelligence|slaying|evasion|protection(?! from))|amulet of reflection):magenta

menu += inventory:lightgray:.*(book|jewellery|magical staff)
item += (identified|known).*(book|jewellery|magical staff):lightgray

menu += lightmagenta:unidentified.*artefact.*
item += unidentified.*artefact.*(jewellery).*:lightmagenta
menu += white:.*artefact.*
item += identified.*artefact.*(jewellery):white

# Ego items
menu += lightblue:unidentified.*weapon.*(runed|glowing|enchanted)
menu += lightblue:unidentified.*armour.*(runed|glowing|embroidered|shiny|dyed)

# Want this to override anything above
item += (a )?stones?$:lightgray
item += useless:darkgrey
# Only mark these types when forbidden; for other types it looks odd.
item += forbidden.*(potion|scroll|food):red

##
## Morgue
#######################################
dump_item_origins = all
dump_message_count = 100
dump_order  = header,hiscore,stats,misc,mutations,skills,spells,inventory
dump_order += overview,screenshot,monlist,messages,skill_gains,action_counts
dump_order += vaults,notes,kills,xp_by_level,skill_gains,action_counts,screenshots,kills_by_place,turns_by_place

note_hp_percent = 10
note_all_skill_levels = true
note_chat_messages = false
user_note_prefix = >>

note_items += experience,of resistance, Archmagi
note_items += crystal plate armour,pearl dragon scales,gold dragon scales
note_items += artefact
note_messages += You feel monstrous
note_messages += You pass through the gate
note_messages += cast .* Abyss

# Noteable monsters
# Undead
note_monsters += ancient lich,curse skull,curse toe,greater mummy
# Depths
note_monsters += caustic shrike
# Special hall_of_zot spawns
note_monsters += killer klown,electric golem,orb of fire

: rc_msg("Finished defining global options.")

##
## DEBUG
#######################################
: rc_msg("DEBUG")
: colortest()

##
## END
################################################################################################
: rc_scs("Successfully initialized magusnn.rc!")
